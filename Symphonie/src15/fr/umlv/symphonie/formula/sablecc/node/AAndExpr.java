/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.formula.sablecc.node;

import java.util.*;
import fr.umlv.symphonie.formula.sablecc.analysis.*;

public final class AAndExpr extends PExpr
{
    private PExpr _expr_;
    private TAnd _and_;
    private PExprLowPriority _exprLowPriority_;

    public AAndExpr()
    {
    }

    public AAndExpr(
        PExpr _expr_,
        TAnd _and_,
        PExprLowPriority _exprLowPriority_)
    {
        setExpr(_expr_);

        setAnd(_and_);

        setExprLowPriority(_exprLowPriority_);

    }
    public Object clone()
    {
        return new AAndExpr(
            (PExpr) cloneNode(_expr_),
            (TAnd) cloneNode(_and_),
            (PExprLowPriority) cloneNode(_exprLowPriority_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndExpr(this);
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public TAnd getAnd()
    {
        return _and_;
    }

    public void setAnd(TAnd node)
    {
        if(_and_ != null)
        {
            _and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and_ = node;
    }

    public PExprLowPriority getExprLowPriority()
    {
        return _exprLowPriority_;
    }

    public void setExprLowPriority(PExprLowPriority node)
    {
        if(_exprLowPriority_ != null)
        {
            _exprLowPriority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprLowPriority_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expr_)
            + toString(_and_)
            + toString(_exprLowPriority_);
    }

    void removeChild(Node child)
    {
        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_and_ == child)
        {
            _and_ = null;
            return;
        }

        if(_exprLowPriority_ == child)
        {
            _exprLowPriority_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(_exprLowPriority_ == oldChild)
        {
            setExprLowPriority((PExprLowPriority) newChild);
            return;
        }

    }
}
