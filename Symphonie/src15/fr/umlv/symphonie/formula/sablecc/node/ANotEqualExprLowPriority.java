/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.formula.sablecc.node;

import java.util.*;
import fr.umlv.symphonie.formula.sablecc.analysis.*;

public final class ANotEqualExprLowPriority extends PExprLowPriority
{
    private PExprLowPriority _exprLowPriority_;
    private TNeq _neq_;
    private PExprNormalPriority _exprNormalPriority_;

    public ANotEqualExprLowPriority()
    {
    }

    public ANotEqualExprLowPriority(
        PExprLowPriority _exprLowPriority_,
        TNeq _neq_,
        PExprNormalPriority _exprNormalPriority_)
    {
        setExprLowPriority(_exprLowPriority_);

        setNeq(_neq_);

        setExprNormalPriority(_exprNormalPriority_);

    }
    public Object clone()
    {
        return new ANotEqualExprLowPriority(
            (PExprLowPriority) cloneNode(_exprLowPriority_),
            (TNeq) cloneNode(_neq_),
            (PExprNormalPriority) cloneNode(_exprNormalPriority_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotEqualExprLowPriority(this);
    }

    public PExprLowPriority getExprLowPriority()
    {
        return _exprLowPriority_;
    }

    public void setExprLowPriority(PExprLowPriority node)
    {
        if(_exprLowPriority_ != null)
        {
            _exprLowPriority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprLowPriority_ = node;
    }

    public TNeq getNeq()
    {
        return _neq_;
    }

    public void setNeq(TNeq node)
    {
        if(_neq_ != null)
        {
            _neq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _neq_ = node;
    }

    public PExprNormalPriority getExprNormalPriority()
    {
        return _exprNormalPriority_;
    }

    public void setExprNormalPriority(PExprNormalPriority node)
    {
        if(_exprNormalPriority_ != null)
        {
            _exprNormalPriority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprNormalPriority_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exprLowPriority_)
            + toString(_neq_)
            + toString(_exprNormalPriority_);
    }

    void removeChild(Node child)
    {
        if(_exprLowPriority_ == child)
        {
            _exprLowPriority_ = null;
            return;
        }

        if(_neq_ == child)
        {
            _neq_ = null;
            return;
        }

        if(_exprNormalPriority_ == child)
        {
            _exprNormalPriority_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exprLowPriority_ == oldChild)
        {
            setExprLowPriority((PExprLowPriority) newChild);
            return;
        }

        if(_neq_ == oldChild)
        {
            setNeq((TNeq) newChild);
            return;
        }

        if(_exprNormalPriority_ == oldChild)
        {
            setExprNormalPriority((PExprNormalPriority) newChild);
            return;
        }

    }
}
