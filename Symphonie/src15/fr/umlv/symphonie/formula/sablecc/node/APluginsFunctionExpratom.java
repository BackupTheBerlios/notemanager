/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.formula.sablecc.node;

import java.util.*;
import fr.umlv.symphonie.formula.sablecc.analysis.*;

public final class APluginsFunctionExpratom extends PExpratom
{
    private TFunctionKeyName _functionKeyName_;
    private TLPar _lPar_;
    private PBloc _bloc_;
    private TRPar _rPar_;

    public APluginsFunctionExpratom()
    {
    }

    public APluginsFunctionExpratom(
        TFunctionKeyName _functionKeyName_,
        TLPar _lPar_,
        PBloc _bloc_,
        TRPar _rPar_)
    {
        setFunctionKeyName(_functionKeyName_);

        setLPar(_lPar_);

        setBloc(_bloc_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new APluginsFunctionExpratom(
            (TFunctionKeyName) cloneNode(_functionKeyName_),
            (TLPar) cloneNode(_lPar_),
            (PBloc) cloneNode(_bloc_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPluginsFunctionExpratom(this);
    }

    public TFunctionKeyName getFunctionKeyName()
    {
        return _functionKeyName_;
    }

    public void setFunctionKeyName(TFunctionKeyName node)
    {
        if(_functionKeyName_ != null)
        {
            _functionKeyName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _functionKeyName_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PBloc getBloc()
    {
        return _bloc_;
    }

    public void setBloc(PBloc node)
    {
        if(_bloc_ != null)
        {
            _bloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bloc_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_functionKeyName_)
            + toString(_lPar_)
            + toString(_bloc_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_functionKeyName_ == child)
        {
            _functionKeyName_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_bloc_ == child)
        {
            _bloc_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_functionKeyName_ == oldChild)
        {
            setFunctionKeyName((TFunctionKeyName) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_bloc_ == oldChild)
        {
            setBloc((PBloc) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}
