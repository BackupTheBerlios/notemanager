/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.formula.sablecc.analysis;

import java.util.*;
import fr.umlv.symphonie.formula.sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAExprFormule(AExprFormule node)
    {
        defaultCase(node);
    }

    public void caseALowPriorityExpr(ALowPriorityExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    public void caseANormalPriorityExprLowPriority(ANormalPriorityExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseALowerThanExprLowPriority(ALowerThanExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseALowerEqualExprLowPriority(ALowerEqualExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseAGreaterThanExprLowPriority(AGreaterThanExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseAGreaterEqExprLowPriority(AGreaterEqExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseAEqualExprLowPriority(AEqualExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseANotEqualExprLowPriority(ANotEqualExprLowPriority node)
    {
        defaultCase(node);
    }

    public void caseAHighPriorityExprNormalPriority(AHighPriorityExprNormalPriority node)
    {
        defaultCase(node);
    }

    public void caseAPlusExprNormalPriority(APlusExprNormalPriority node)
    {
        defaultCase(node);
    }

    public void caseAMinusExprNormalPriority(AMinusExprNormalPriority node)
    {
        defaultCase(node);
    }

    public void caseAExpratomExprHighPriority(AExpratomExprHighPriority node)
    {
        defaultCase(node);
    }

    public void caseAMultExprHighPriority(AMultExprHighPriority node)
    {
        defaultCase(node);
    }

    public void caseADivExprHighPriority(ADivExprHighPriority node)
    {
        defaultCase(node);
    }

    public void caseAPluginsFunctionExpratom(APluginsFunctionExpratom node)
    {
        defaultCase(node);
    }

    public void caseAIconstExpratom(AIconstExpratom node)
    {
        defaultCase(node);
    }

    public void caseADconstExpratom(ADconstExpratom node)
    {
        defaultCase(node);
    }

    public void caseAColumnExpratom(AColumnExpratom node)
    {
        defaultCase(node);
    }

    public void caseAPluginsKeyWordsBloc(APluginsKeyWordsBloc node)
    {
        defaultCase(node);
    }

    public void caseACellAccessBloc(ACellAccessBloc node)
    {
        defaultCase(node);
    }

    public void caseASingleCourses(ASingleCourses node)
    {
        defaultCase(node);
    }

    public void caseAMultipleCourses(AMultipleCourses node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTDollar(TDollar node)
    {
        defaultCase(node);
    }

    public void caseTIconst(TIconst node)
    {
        defaultCase(node);
    }

    public void caseTDconst(TDconst node)
    {
        defaultCase(node);
    }

    public void caseTFunctionKeyName(TFunctionKeyName node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
