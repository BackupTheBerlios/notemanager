/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.formula.sablecc.analysis;

import fr.umlv.symphonie.formula.sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAExprFormule(AExprFormule node);
    void caseALowPriorityExpr(ALowPriorityExpr node);
    void caseAAndExpr(AAndExpr node);
    void caseAOrExpr(AOrExpr node);
    void caseANormalPriorityExprLowPriority(ANormalPriorityExprLowPriority node);
    void caseALowerThanExprLowPriority(ALowerThanExprLowPriority node);
    void caseALowerEqualExprLowPriority(ALowerEqualExprLowPriority node);
    void caseAGreaterThanExprLowPriority(AGreaterThanExprLowPriority node);
    void caseAGreaterEqExprLowPriority(AGreaterEqExprLowPriority node);
    void caseAEqualExprLowPriority(AEqualExprLowPriority node);
    void caseANotEqualExprLowPriority(ANotEqualExprLowPriority node);
    void caseAHighPriorityExprNormalPriority(AHighPriorityExprNormalPriority node);
    void caseAPlusExprNormalPriority(APlusExprNormalPriority node);
    void caseAMinusExprNormalPriority(AMinusExprNormalPriority node);
    void caseAExpratomExprHighPriority(AExpratomExprHighPriority node);
    void caseAMultExprHighPriority(AMultExprHighPriority node);
    void caseADivExprHighPriority(ADivExprHighPriority node);
    void caseAPluginsFunctionExpratom(APluginsFunctionExpratom node);
    void caseAIconstExpratom(AIconstExpratom node);
    void caseADconstExpratom(ADconstExpratom node);
    void caseAColumnExpratom(AColumnExpratom node);
    void caseAPluginsKeyWordsBloc(APluginsKeyWordsBloc node);
    void caseACellAccessBloc(ACellAccessBloc node);
    void caseASingleCourses(ASingleCourses node);
    void caseAMultipleCourses(AMultipleCourses node);

    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTEqual(TEqual node);
    void caseTNeq(TNeq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTDollar(TDollar node);
    void caseTIconst(TIconst node);
    void caseTDconst(TDconst node);
    void caseTFunctionKeyName(TFunctionKeyName node);
    void caseTLBrace(TLBrace node);
    void caseTName(TName node);
    void caseTComma(TComma node);
    void caseTRBrace(TRBrace node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
}
